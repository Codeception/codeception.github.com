---
layout: post
title: Codeception 1.0.3 Released. Generators and Agile Documentation.
date: 2012-02-14 01:03:50
---

This *Codeception* release is all about minor but useful features. Starting from 1.0.3 you will be notified on every new Codeception release from console. 
If you are not running tests, Codeception Cli application will check for new version and notify you if it is available.

{% highlight bash %}
$ codecept
UPDATE: version 1.0.3 released. See changes on: https://codeception.com.
Codeception version 1.0.2
{% endhighlight%}

There are new generators for empty tests: *Cest* and *Cept* files. Empty test suite can be generated too. Just check new **'generate:'** commands. 

### Agile Documentation

But the most interesting  generation feature is **Agile Documentation**. From now you can improve your documentation generated by [DocBlox](https://www.docblox-project.org/) by appending test scenarios into text. With Codeception BDD approach to [Unit Tests](https://codeception.com/docs/06-UnitTestsAndBDD) it's easy to imagine every test as usage documentation.

The concept of Agile Documentation will be demonstrated in following example:

We have a sample static method for creating an entity Group. Which can be group of people in social network, for example.
This method uses Doctrine 2 as ORM.

{% highlight php %}
<?php
class Group {
	
	// This creates new group by user
	public static function create($name, $founder_id)
	{		
		$em = self::$entityManager;

		$group = new \Model\Group;
		$group->setName($name);
		$group->setUser($em->getRepository('Model\User')->find($founder_id));
		$em->persist($group);
		$em->flush();

		return $group->getId();
	}
}
?>
{% endhighlight %}

This method requires Id of user who creates group and group name. Here is test for this function:

{% highlight php %}
<?php
    public function create(\CodeGuy $I)
    {
    	$user_id = Fixtures::get('valid_user')->getId();

        $I->wantTo('create group');
        $I->executeTestedMethodWith('DemoGroup', $user_id)
            ->seeInRepository('Model\Group', array('name' => 'DemoGroup', 'user_id' => $user_id, 'type' => 'group'))
            ->seeResultIs('int');
    }
?>    
{% endhighlight%}    

This test is translated into documentation for Group::create method.

{% highlight bash %}
With this method I can create group

If I execute \Service\Group::create("DemoGroup",1)
I will see in repository "Model\Group",{"name":"DemoGroup","user_id": 1, "type": "group" }
I will see result is "int"
{% endhighlight %}

Codeception scans for all Cest files and for all classes passed to DocBlox. When tests match the function in documentation the test is processed and appended into function description.

To start using Codeception with DocBlox you should use the same project root for both projects, i.e. codeception.yml and docblox.xml should be in one directory.
Include plugin into docblox.xml:

{% highlight xml %}
    <plugins>
        <plugin path="{FULL-PATH-TO-PEAR}/Codeception/plugins/DocBlox/Codeception">
        </plugin>
    </plugins>
{% endhighlight%}

As you see, you should specify path to PEAR explicitly. This is DocBlox limitation. Plugins can be either local or provided with DocBlox distribution. I'm not sure how to deal with current Codeception plugin for DocBlox, so I [asked this question on GitHub](https://github.com/docblox/docblox/issues/370). I hope in near future a better solution will be proposed.

### Bugfixes

* replaced suppressed errors with error elimination (thanks to [jonphipps](https://github.com/jonphipps))
* fixed scenario generations
* fixed generation of html reports

Please update your version via PEAR:

{% highlight bash %}
$ pear install codeception/Codeception
{% endhighlight %}

or download updated Phar package.